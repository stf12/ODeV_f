/**
 ******************************************************************************
 * @file    hid_report_parser.h
 * @author  STMicroelectronics - ST-Korea - MCD Team
 * @version 1.3.0
 * @date    Jan 21, 2019
 *
 * @brief   Input Output and Feature report Declaration.
 *
 * This file declare the Input, Output, Feature and Internal report for
 * the application. The reports are generated by the sensors as well as
 * form the MCU (internal reports).
 *
 * Report ID list:
 * - 0x01: inputReport                (Sensor --> MCU). ISM330DHCX
 * - 0xFE: internalReport             (MCU --> MCU).    FORCE_STEP
 *
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; COPYRIGHT 2019 STMicroelectronics</center></h2>
 *
 * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *        http://www.st.com/software_license_agreement_liberty_v2
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************
 */

#ifndef HID_REPORT_PARSER_H_
#define HID_REPORT_PARSER_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "syserror.h"
#include "SPIBusIF.h"
#include "I2CBusIF.h"

#define HID_REPORT_ID_ISM330DHCX                0x01  ///< Report coming from the ISM330DHCX sensor
#define HID_REPORT_ID_IIS3DWB                   0x02  ///< Report coming from the IIS3DWB sensor
#define HID_REPORT_ID_AI_CMD                    0x03  ///< AI command encapsulated in a HID report.
#define HID_REPORT_ID_SENSOR_CMD                0x04  ///< Sensor command encapsulated in a HID report.
#define HID_REPORT_ID_SD_CMD                    0x05  ///< SDCARD command encapsulated in a HID report.
#define HID_REPORT_ID_SPI_BUS_READ              0x06  ///< Command to read from the SPI bus
#define HID_REPORT_ID_SPI_BUS_WRITE             0x07  ///< Command to write in the SPI bus.
#define HID_REPORT_ID_I2C_BUS_READ              0x08  ///< Command to read from the I2C bus
#define HID_REPORT_ID_I2C_BUS_WRITE             0x09  ///< Command to write in the I2C bus.
#define HID_REPORT_ID_FORCE_STEP                0xFE  ///< Special ID used by the INIT task to force the execution of ManagedTaskEx step.

typedef union _HIDReport {
  uint8_t reportID;

  //--------------------------------------------------------------------------------
  //  SensorReport 01 (Device --> MCU) - Sensor ISM330DHCX
  //--------------------------------------------------------------------------------

  struct ism330dhcxReport_t
  {
    uint8_t  reportId;                                 // Report ID = 0x01 (1)
    uint8_t  bDataReady : 1;                           // New sensor data ready
    uint8_t  nReserved  : 7;                           // Reserved
  } ism330dhcxReport;

  //--------------------------------------------------------------------------------
  //  SensorReport 02 (Device --> MCU) - Sensor IIS3DWB
  //--------------------------------------------------------------------------------

  struct iis3dwbReport_t
  {
    uint8_t  reportId;                                 // Report ID = 0x02 (2)
    uint8_t  bDataReady : 1;                           // New sensor data ready
    uint8_t  nReserved  : 7;                           // Reserved
  } iis3dwbReport;

  //--------------------------------------------------------------------------------
  //  aiReport 03 (CLI --> MCU)
  //--------------------------------------------------------------------------------

  struct aiReport_t
  {
    uint8_t   reportId;                                // Report ID = 0x03 (3)
    uint16_t  nCmdID;                                  // Specify the command ID
    boolean_t bSyncCmd;                                // TRUE when the command must be blocking. It is managed by AITaskPostCommand() and AITaskSendComand() API
    union {
      uint32_t nParam;                                 // generic parameter. It depends on the command ID.
      float fParam;                                    // genetic floating point parameters.
    };
  } aiReport;

  //--------------------------------------------------------------------------------
  //  SensorReport 04 (MCU --> MCU) - Generic Sensor command
  //--------------------------------------------------------------------------------

  struct sensorReport_t
  {
    uint8_t   reportId;                                // Report ID = 0x04 (4)
    uint8_t   nPadding;                                // Padding byte
    uint16_t  nCmdID;                                  // Specify the command ID
    uint32_t  nParam;                                  // Specify an optional parameter.
  } sensorReport;

  //--------------------------------------------------------------------------------
  //  SDCARD Report 05 (MCU --> MCU) - SDCARD command
  //--------------------------------------------------------------------------------

  struct sdReport_t
  {
    uint8_t   reportId;                                // Report ID = 0x05 (5)
    uint8_t   nPadding;                                // Padding byte
    uint16_t  nCmdID;                                  // Specify the command ID
    uint32_t  nParam;                                  // Specify an optional parameter.
  } sdReport;

  //--------------------------------------------------------------------------------
  //  SPI Read / Write command 06 07 (MCU --> MCU) - SPI Bus command
  //--------------------------------------------------------------------------------

  struct spiIOReport_t
  {
    uint8_t   reportId;                                // Report ID = 0x06 / 0x07 (6 / 7)
    uint8_t   nRegAddr;
    uint16_t  nDataSize;
    uint8_t  *pnData;
    SPIBusIF *pxSensor;
  } spiIOReport;

 //--------------------------------------------------------------------------------
 //  I2C Read / Write command 08 09 (MCU --> MCU) - SPI Bus command
 //--------------------------------------------------------------------------------

  struct i2cIOReport_t
  {
    uint8_t   reportId;                                // Report ID = 0x08 / 0x09 (8 / 9)
    uint8_t   nRegAddr;
    uint16_t  nDataSize;
    uint8_t  *pnData;
    I2CBusIF *pxSensor;
  } i2cIOReport;

  //--------------------------------------------------------------------------------
  //  internalReport (MCU)
  //--------------------------------------------------------------------------------

  struct internalReportFE_t
  {
    uint8_t  reportId;                                 // Report ID = 0xFE
    uint8_t  nData;                                    // reserved. It can be ignored
  } internalReportFE;

} HIDReport;


/**
 * Get the size of the report with a specified ID
 *
 * @param nReportID [IN] specifies a report ID
 * @return the size of the report with the specified ID or SYS_INVALID_PARAMETER_ERROR_CODE
 */
uint16_t HidReportGetSize(uint8_t nReportID);


#ifdef __cplusplus
}
#endif


#endif /* HID_REPORT_PARSER_H_ */
